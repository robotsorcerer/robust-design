% Copyright (C) Henrik Anfinsen 2017-2019
%
% Feel free to use the code, but give credit to the original source and
% author

function dt = ode_chap_14_06(t, x, sys)

    
%% Parameter extraction

    N = sys.N;
    N_grid = sys.N_grid;
    
%% Variable extraction and augmentation
    dummy = reshape(x(1:(12*N)), N, 12);
    dummy_a = [2*dummy(1, :) - dummy(2, :); dummy; 2*dummy(N, :) - dummy(N-1, :)];
    
    u1_sf_a  = dummy_a(:, 1);    u1_sf = u1_sf_a(2:(sys.N+1));
    u2_sf_a  = dummy_a(:, 2);    u2_sf = u2_sf_a(2:(sys.N+1));
    v_sf_a   = dummy_a(:, 3);    v_sf  = v_sf_a(2:(sys.N+1));
    
    u1_of_a  = dummy_a(:, 4);    u1_of = u1_of_a(2:(sys.N+1));
    u2_of_a  = dummy_a(:, 5);    u2_of = u2_of_a(2:(sys.N+1));
    v_of_a   = dummy_a(:, 6);    v_of  = v_of_a(2:(sys.N+1));
    
    u1_hat_a  = dummy_a(:, 7);   u1_hat = u1_hat_a(2:(sys.N+1));
    u2_hat_a  = dummy_a(:, 8);   u2_hat = u2_hat_a(2:(sys.N+1));
    v_hat_a   = dummy_a(:, 9);   v_hat  = v_hat_a(2:(sys.N+1));
    
    u1_tr_a  = dummy_a(:, 10);   u1_tr = u1_tr_a(2:(sys.N+1));
    u2_tr_a  = dummy_a(:, 11);   u2_tr = u2_tr_a(2:(sys.N+1));
    v_tr_a   = dummy_a(:, 12);   v_tr  = v_tr_a(2:(sys.N+1));

    U_sf_f = x(12*sys.N+1);
    U_of_f = x(12*sys.N+2);
    U_tr_f = x(12*sys.N+3);
    

%% Controller
    if (sys.ctrl_on == 1)
        U_sf = - sys.c_1 * u1_sf_a(sys.N_grid) - ...
               sys.c_2 * u2_sf_a(sys.N_grid) + ...
               sys.intArr' * (sys.K1_1 .* u1_sf_a) + ...
               sys.intArr' * (sys.K2_1 .* u2_sf_a) + ...
               sys.intArr' * (sys.K3_1 .* v_sf_a);
         
        U_of = - sys.c_1 * u1_hat_a(sys.N_grid) - ...
               sys.c_2 * u2_hat_a(sys.N_grid) + ...
               sys.intArr' * (sys.K1_1 .* u1_hat_a) + ...
               sys.intArr' * (sys.K2_1 .* u2_hat_a) + ...
               sys.intArr' * (sys.K3_1 .* v_hat_a);
           
        U_tr = - sys.c_1 * u1_tr_a(sys.N_grid) - ...
               sys.c_2 * u2_tr_a(sys.N_grid) + ...
               sys.intArr' * (sys.K1_1 .* u1_tr_a) + ...
               sys.intArr' * (sys.K2_1 .* u2_tr_a) + ...
               sys.intArr' * (sys.K3_1 .* v_tr_a) + ...
               sys.r_func(t + sys.t_v);
    else
        U_sf = 0;
        U_of = 0;
        U_tr = 0;
    end;
    
    
%% System and observer dynamics
    % Boundary conditions
    u1_sf_a(1) = sys.q_1 * v_sf_a(1);
    u2_sf_a(1) = sys.q_2 * v_sf_a(1);
    v_sf_a(sys.N_grid) = sys.c_1 * u1_sf_a(sys.N_grid) + ...
                         sys.c_2 * u2_sf_a(sys.N_grid) + U_sf;
    
    u1_of_a(1) = sys.q_1 * v_of_a(1);
    u2_of_a(1) = sys.q_2 * v_of_a(1);
    v_of_a(sys.N_grid) = sys.c_1 * u1_of_a(sys.N_grid) + ...
                         sys.c_2 * u2_of_a(sys.N_grid) + U_of;
    
    u1_hat_a(1) = sys.q_1 * v_of_a(1);
    u2_hat_a(1) = sys.q_2 * v_of_a(1);
    v_hat_a(sys.N_grid) = sys.c_1 * u1_hat_a(sys.N_grid) + ...
                          sys.c_2 * u2_hat_a(sys.N_grid) + U_of;
                      
    u1_tr_a(1) = sys.q_1 * v_tr_a(1);
    u2_tr_a(1) = sys.q_2 * v_tr_a(1);
    v_tr_a(sys.N_grid) = sys.c_1 * u1_tr_a(sys.N_grid) + ...
                         sys.c_2 * u2_tr_a(sys.N_grid) + U_tr;
    
    % Spatial derivatives
    u1_sf_x   = [(u1_sf_a(2) - u1_sf_a(1)) / sys.Delta; (u1_sf_a(1:(N_grid-3)) - 4 * u1_sf_a(2:(N_grid-2)) + 3*u1_sf_a(3:(N_grid-1))) / (2 * sys.Delta)];
    u2_sf_x   = [(u2_sf_a(2) - u2_sf_a(1)) / sys.Delta; (u2_sf_a(1:(N_grid-3)) - 4 * u2_sf_a(2:(N_grid-2)) + 3*u2_sf_a(3:(N_grid-1))) / (2 * sys.Delta)];
    v_sf_x   = [(- 3*v_sf_a(2:(N_grid-2)) + 4 * v_sf_a(3:(N_grid-1)) - v_sf_a(4:N_grid)) / (2 * sys.Delta); (v_sf_a(N_grid) - v_sf_a(N_grid-1)) / sys.Delta];

    u1_of_x   = [(u1_of_a(2) - u1_of_a(1)) / sys.Delta; (u1_of_a(1:(N_grid-3)) - 4 * u1_of_a(2:(N_grid-2)) + 3*u1_of_a(3:(N_grid-1))) / (2 * sys.Delta)];
    u2_of_x   = [(u2_of_a(2) - u2_of_a(1)) / sys.Delta; (u2_of_a(1:(N_grid-3)) - 4 * u2_of_a(2:(N_grid-2)) + 3*u2_of_a(3:(N_grid-1))) / (2 * sys.Delta)];
    v_of_x   = [(- 3*v_of_a(2:(N_grid-2)) + 4 * v_of_a(3:(N_grid-1)) - v_of_a(4:N_grid)) / (2 * sys.Delta); (v_of_a(N_grid) - v_of_a(N_grid-1)) / sys.Delta];

    u1_hat_x   = [(u1_hat_a(2) - u1_hat_a(1)) / sys.Delta; (u1_hat_a(1:(N_grid-3)) - 4 * u1_hat_a(2:(N_grid-2)) + 3*u1_hat_a(3:(N_grid-1))) / (2 * sys.Delta)];
    u2_hat_x   = [(u2_hat_a(2) - u2_hat_a(1)) / sys.Delta; (u2_hat_a(1:(N_grid-3)) - 4 * u2_hat_a(2:(N_grid-2)) + 3*u2_hat_a(3:(N_grid-1))) / (2 * sys.Delta)];
    v_hat_x   = [(- 3*v_hat_a(2:(N_grid-2)) + 4 * v_hat_a(3:(N_grid-1)) - v_hat_a(4:N_grid)) / (2 * sys.Delta); (v_hat_a(N_grid) - v_hat_a(N_grid-1)) / sys.Delta];

    u1_tr_x   = [(u1_tr_a(2) - u1_tr_a(1)) / sys.Delta; (u1_tr_a(1:(N_grid-3)) - 4 * u1_tr_a(2:(N_grid-2)) + 3*u1_tr_a(3:(N_grid-1))) / (2 * sys.Delta)];
    u2_tr_x   = [(u2_tr_a(2) - u2_tr_a(1)) / sys.Delta; (u2_tr_a(1:(N_grid-3)) - 4 * u2_tr_a(2:(N_grid-2)) + 3*u2_tr_a(3:(N_grid-1))) / (2 * sys.Delta)];
    v_tr_x   = [(- 3*v_tr_a(2:(N_grid-2)) + 4 * v_tr_a(3:(N_grid-1)) - v_tr_a(4:N_grid)) / (2 * sys.Delta); (v_tr_a(N_grid) - v_tr_a(N_grid-1)) / sys.Delta];

    % Dynamics
    u1_sf_t     = - sys.lambda_1(2:(N+1)) .* u1_sf_x ...
                        + sys.sigma_11(2:(N+1)) .* u1_sf ...
                        + sys.sigma_12(2:(N+1)) .* u2_sf ...
                        + sys.omega_1(2:(N+1)) .* v_sf;
    u2_sf_t     = - sys.lambda_2(2:(N+1)) .* u2_sf_x ...
                        + sys.sigma_21(2:(N+1)) .* u1_sf ...
                        + sys.sigma_22(2:(N+1)) .* u2_sf ...
                        + sys.omega_2(2:(N+1)) .* v_sf;
    v_sf_t      =  sys.mu(2:(N+1)) .*  v_sf_x ...
                        + sys.varpi_1(2:(N+1)) .* u1_sf ...
                        + sys.varpi_2(2:(N+1)) .* u2_sf;
                    
    u1_of_t     = - sys.lambda_1(2:(N+1)) .* u1_of_x ...
                        + sys.sigma_11(2:(N+1)) .* u1_of ...
                        + sys.sigma_12(2:(N+1)) .* u2_of ...
                        + sys.omega_1(2:(N+1)) .* v_of;
    u2_of_t     = - sys.lambda_2(2:(N+1)) .* u2_of_x ...
                        + sys.sigma_21(2:(N+1)) .* u1_of ...
                        + sys.sigma_22(2:(N+1)) .* u2_of ...
                        + sys.omega_2(2:(N+1)) .* v_of;
    v_of_t      =  sys.mu(2:(N+1)) .*  v_of_x ...
                        + sys.varpi_1(2:(N+1)) .* u1_of ...
                        + sys.varpi_2(2:(N+1)) .* u2_of;
                    
    u1_hat_t    = - sys.lambda_1(2:(N+1)) .* u1_hat_x ...
                        + sys.sigma_11(2:(N+1)) .* u1_hat ...
                        + sys.sigma_12(2:(N+1)) .* u2_hat ...
                        + sys.omega_1(2:(N+1)) .* v_hat ...
                        + sys.p1_1(2:(N+1)) * (v_of_a(1) - v_hat_a(1));
    u2_hat_t    = - sys.lambda_2(2:(N+1)) .* u2_hat_x ...
                        + sys.sigma_21(2:(N+1)) .* u1_hat ...
                        + sys.sigma_22(2:(N+1)) .* u2_hat ...
                        + sys.omega_2(2:(N+1)) .* v_hat ...
                        + sys.p1_2(2:(N+1)) * (v_of_a(1) - v_hat_a(1));
    v_hat_t     =  sys.mu(2:(N+1)) .*  v_hat_x ...
                        + sys.varpi_1(2:(N+1)) .* u1_hat ...
                        + sys.varpi_2(2:(N+1)) .* u2_hat ...
                        + sys.p2(2:(N+1)) * (v_of_a(1) - v_hat_a(1));
                    
                    
    u1_tr_t     = - sys.lambda_1(2:(N+1)) .* u1_tr_x ...
                        + sys.sigma_11(2:(N+1)) .* u1_tr ...
                        + sys.sigma_12(2:(N+1)) .* u2_tr ...
                        + sys.omega_1(2:(N+1)) .* v_tr;
    u2_tr_t     = - sys.lambda_2(2:(N+1)) .* u2_tr_x ...
                        + sys.sigma_21(2:(N+1)) .* u1_tr ...
                        + sys.sigma_22(2:(N+1)) .* u2_tr ...
                        + sys.omega_2(2:(N+1)) .* v_tr;
    v_tr_t      =  sys.mu(2:(N+1)) .*  v_tr_x ...
                        + sys.varpi_1(2:(N+1)) .* u1_tr ...
                        + sys.varpi_2(2:(N+1)) .* u2_tr;
    
    U_sf_f_t = sys.gamma_U * (U_sf - U_sf_f);
    U_of_f_t = sys.gamma_U * (U_of - U_of_f);
    U_tr_f_t = sys.gamma_U * (U_tr - U_tr_f);

    
%% Parse
    dt = [u1_sf_t; u2_sf_t; v_sf_t; ...
          u1_of_t; u2_of_t; v_of_t; ...
          u1_hat_t; u2_hat_t; v_hat_t; ...
          u1_tr_t; u2_tr_t; v_tr_t; ...
          U_sf_f_t; U_of_f_t; U_tr_f_t];